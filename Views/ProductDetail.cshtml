@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<ContentModels.ProductDetail>
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@{
    Layout = "_Layout.cshtml";
    var galleryItem = Model.Value<IEnumerable<IPublishedElement>>("galleryItem");
}

<section class="inner-banner" style="background: url(@Model.Value("smallImage")) center center no-repeat;">
    <div class="container">
        <h1>@Model.Name()</h1>
    </div>
</section>

<section class="product-detail">
    <div class="container">
        <div class="row">
            <div class="col-md-12 mx-auto">
                <div class="info-panel text-center">
                    <span class="sub-heading">@Model.Value("productSmallHeading")</span>
                    <h1 class="text-primary">@Model.Value("productHeading")</h1>

                    <div class="detail-img">
                        <img src="@Model.Value("productDetailImage")" class="w-100">
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-8 mx-auto">
                <div class="info-panel text-center">
                    @Model.Value("productDescription")
                </div>
            </div>
        </div>
    </div>
</section>

<section class="product-detail">
    <div class="container">
        <div class="flexslider carousel">
            <ul class="slides">
                @foreach (var galleryItems in galleryItem)
                {
                    var galleryImage = galleryItems.Value<IPublishedContent>("itemImage");

                    <li>
                        <img src="@galleryImage.Url()" class="card-img-top" alt="@galleryImage.Name">
                    </li>
                }

            </ul>
        </div>

        <div class="row">
            <div class="col-md-12 justify-content-center download-btn">
                @{
                    if (Model.Value("datasheet").ToString() == "" && Model.Value("hiResImage").ToString() != "")
                    {
                        <a target="_blank" href="@Model.Value("datasheet")" class="btn btn-primary btn-sm btn-rounded d-none">Download Datasheet</a>
                        <a target="_blank" href="@Model.Value("hiResImage")" class="btn btn-primary btn-sm btn-rounded">Download HI-RES IMAGE</a>
                    }

                    else if (Model.Value("datasheet").ToString() != "" && Model.Value("hiResImage").ToString() == "")
                    {
                        <a target="_blank" href="@Model.Value("datasheet")" class="btn btn-primary btn-sm btn-rounded">Download Datasheet</a>
                        <a target="_blank" href="@Model.Value("hiResImage")" class="btn btn-primary btn-sm btn-rounded d-none">Download HI-RES IMAGE</a>
                    }

                    else if (Model.Value("datasheet").ToString() == "" && Model.Value("hiResImage").ToString() == "")
                    {
                        <a target="_blank" href="@Model.Value("datasheet")" class="btn btn-primary btn-sm btn-rounded d-none">Download Datasheet</a>
                        <a target="_blank" href="@Model.Value("hiResImage")" class="btn btn-primary btn-sm btn-rounded d-none">Download HI-RES IMAGE</a>
                    }

                    else
                    {
                         <a target="_blank" href="@Model.Value("datasheet")" class="btn btn-primary btn-sm btn-rounded">Download Datasheet</a>
                         <a target="_blank" href="@Model.Value("hiResImage")" class="btn btn-primary btn-sm btn-rounded">Download HI-RES IMAGE</a>
                    }
                }
               
            </div>
        </div>
    </div>
</section>

@await Umbraco.RenderMacroAsync("OurPromise")
@await Umbraco.RenderMacroAsync("GetInTouch")


<script type="text/javascript">
    (function() {

        // store the slider in a local variable
        var $window = $(window),
            flexslider = { vars: {} };

        // tiny helper function to add breakpoints
        function getGridSize() {
            return (window.innerWidth < 767) ? 1 :
                (window.innerWidth < 991) ? 2 :
                    (window.innerWidth < 1199) ? 3 :
                        (window.innerWidth > 1200) ? 4 : 4;
        }

        //$(function() {
        //    SyntaxHighlighter.all();
        //});

        $window.load(function() {
            $('.flexslider').flexslider({
                animation: "slide",
                animationLoop: false,
                itemWidth: 210,
                itemMargin: 30,
                minItems: getGridSize(), // use function to pull in initial value
                maxItems: getGridSize() // use function to pull in initial value
            });
        });

        // check grid size on resize event
        $window.resize(function() {
            var gridSize = getGridSize();

            flexslider.vars.minItems = gridSize;
            flexslider.vars.maxItems = gridSize;
        });
    }());
</script>

